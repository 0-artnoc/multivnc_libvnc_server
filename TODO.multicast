
- some empty updates are sent in split rect case

- more heartbeat messages if nothing changed?

- add autoconf detection of used functions.

- make send rate adapt

- missing packets only NACKed once

- pur->pending could hold (pixelformat, encoding)

- verify sender address+port in  ReadFromRFBServerMulticast()?
  -> would need bind() to address we got from getaddrinfo() 
     (plus a SO_REUSEADDR setsockopt() if same port as client &
     running on same host...) on server side, address and port
     transmitted to client, then a connect() at client side.

- Implement other encodings than raw.

- As there are many different ways of computing lost packet stats 
  (take a sample every time interval or every n packets or compute
  global average), the loss-ratio handling is right now completely
  left to the client app, the library just spits out some warnings.
  Leave that so or provide someting in the library? 
  --> We have to do at least some of this if we want the server 
      throttling in the library...

- What about multicast specific stats? Right now it's still all
  per-client.

- client side: introduce a new multicast function for each unicast one
  or use a solution with an internal flag that signals that a function
  should behave the multicast way instead? actually, this also hold
  true for the server side... hmm.

- Leave the nRect calculation in rfbSendMulticastFramebufferUpdate()
  as it is (number of rects is returned by
  rfbPutMulticastEndcodingPreferred)?
  --> We're not able to catch some obscure errors in the encoding
      specific functions. but what errors? It's guaranteed beforehand
      that the rects always fit, so that leaves us with some deflate
      errors and stuff. do these ever happen?
  --> Other possibility would be to have sth like a
      rfbGetNrRectsPreferredEncoding() which would be used by
      rfbSendMulticastFramebufferUpdate() and
      rfbSendFramebufferUpdate(). Then we would need to turn of
      cl->lastrectenabled in the multicast case and re-enable it later
      on




  



